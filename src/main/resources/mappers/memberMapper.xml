<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="kr.co.bapsi.member.dao.MemberDAO">
  <!-- <mapper namespace="com.spring.MemberMapper"> -->
  
 <!--************************회원가입 ****************8***************  -->
   <!-- 회원가입 -->
     <insert id="join" parameterType = "MemberVO">
        insert into ruser_t (no, email, password, hintq, hinta, name, nickname, tel, age, gender, comments)
        values(ruser_no_seq.nextval, #{email}, #{password}, #{hintq}, #{hinta}, #{name}, #{nickname}, #{tel}, #{age}, #{gender}, #{comments})
     </insert>
  
     <!-- 이메일 중복체크 -->
     <select id="checkEmail" parameterType="String" resultType="Integer">
        select count(*)
        from ruser_t
        where email = #{email}
     </select>
  
     <!-- 닉네임 중복 체크 -->
     <select id="checkNickname" parameterType="String" resultType="Integer">
        select count(*)
        from ruser_t
        where nickname = #{nickname}
     </select>
  
<!--***********************************************************-->


<!--***********************마이페이지*******************************-->

  
     <!-- 마이페이지 -->
     <select id = "myPage" parameterType="int" resultType = "MemberVO">
        select no, email, hintq, hinta, name, nickname, tel, age, gender, comments
        from ruser_t
        where no = #{no}
     </select>
  
  	 <!-- 마이페이지 파일 -->
     <select id = "myPagefile" parameterType="int" resultType = "UploadVO">
     	select file_fakename
     	from user_photo
     	where no = #{no}
     </select>
  
     <!-- 회원정보 수정 -->
     <update id = "update" parameterType = "MemberVO">
        update ruser_t
        set hintq = #{hintq}, hinta = #{hinta}, age = #{age}, nickname = #{nickname}, tel = #{tel}, comments = #{comments}
        where no = #{no}
     </update>
    
     
     <!-- 회원탈퇴 -->
     <delete id = "selfDelete" parameterType = "int">
        delete ruser_t
        where no = #{no}
     </delete>
     
     <!-- 회원탈퇴시 프로필 삭제 -->
     <delete id = "profileDelete" parameterType = "int">
     	delete user_photo
     	where no = #{no}
     </delete>
     
 <!--*****************************************************  -->    
  
 <!--****************회원목록(관리자) 관련 메소드******************-->   
     
       <!-- 회원정보 상세조회 -->
     <select id="detailMember" parameterType="int" resultType="MemberVO">
        select no, email, name, nickname, tel, gender, age, comments, type, to_char(reg_date, 'yyyy-mm-dd') as reg_date
        from ruser_t
        where no = #{no}
     </select>

	<!-- 괸리자 페이지 : 회원정보 프로필 -->
	<select id="detailProfile" parameterType = "int" resultType="UploadVO">
		select file_fakename
		from user_photo
		where no = #{no}
	</select>
	
     <!-- 관리자 페이지 : 회원정보 수정처리 -->
     <update id="memberUpdate" parameterType = "MemberVO">
        update ruser_t
        set name = #{name}, age = #{age}, nickname = #{nickname}, tel = #{tel}, comments = #{comments}
        where no = #{no}
     </update>
     
     
      <!-- 강제회원탈퇴 -->
     <delete id = "adminDelete" parameterType = "int">
        delete ruser_t
        where no = #{no}
     </delete>
     
     
          <!--관리자페이지: 회원정보 페이징  -->
     <select id="pagingList" resultType="MemberVO">
     <![CDATA[
		select 
		b.rnum, b.no, b.email, b.name, b.nickname,b.tel,b.age,b.comments,b.type,b.point
		from(
		 select rownum as rnum, a.no, a.email, a.name, a.nickname, a.tel, a.age, a.comments, a.type, a.point
		    from (
		        select no, email, name, nickname,age, tel, comments, type, point
		            from ruser_t
		            order by no desc) a
		        where rownum <= #{page}*10 ) b
		where b.rnum > (#{page}*10)-10
     ]]>
     </select>
     
     <!-- 관리자페이지: 회원정보 페이징 -->
     <select id="pagingCriteria" resultType="MemberVO">
     <![CDATA[
     	select 
     	b.rnum, b.no, b.email, b.name, b.nickname,b.tel,b.age,b.comments,b.type,b.point
     	from(
 		 select rownum as rnum, a.no, a.email, a.name, a.nickname, a.tel, a.age, a.comments, a.type, a.point
 		    from (
     			select no, email, name, nickname,age, tel, comments, type, point
 		            from ruser_t
 		            order by no desc) a
 		    where rownum <= #{startPage}+(#{numPerPage}-1) ) b
 		  where b.rnum >= #{startPage}

     ]]>
     </select>
     
     <!--관리자페이지: 페이징 전체 데이터 가져오기  -->
     <select id="pagingCountData" resultType="int">
     <![CDATA[
     	select count(no) from ruser_t
     	where no>0
     ]]>
       
     </select>
     
       <!--관리자 검색기능 구현: MyBatis에서 제공하는 <include>, <sql> 중복된 값 간편하게!!  -->
  <sql id="findSQL">
  
  	  <where>
  	  	<if test="findType != null and findType =='N'.toString()">
  			and email like '%'||#{keyword}||'%'
  			or name like '%'||#{keyword}||'%'
  			or gender like '%'||#{keyword}||'%'
  			or nickname like '%'||#{keyword}||'%'
  			or tel like '%'||#{keyword}||'%'
  			or age like '%'||#{keyword}||'%'
  			or type like '%'||#{keyword}||'%'
  			or point like '%'||#{keyword}||'%'
  			or reg_date like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType =='E'.toString()">
  			and email like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType =='N'.toString()">
  			and name like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType =='G'.toString()">
  			and gender like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType=='K'.toString()">
  			and nickname like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType=='T'.toString()">
  			and tel like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and  findType == 'A'.toString()">
  			and age like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType =='S'.toString()">
    		and type like '%'||#{keyword}||'%'
  		</if>
  		 <if test="findType != null and findType =='P'.toString()">
    		and point like '%'||#{keyword}||'%'
  		</if>
  		<if test="findType != null and findType =='D'.toString()">
    		and reg_date like '%'||#{keyword}||'%'
  		</if>
  	</where>
  	
  
  </sql>
  
  <!--관리자페이지: 검색기능 구현  -->
   <select id="listFindM" resultType="MemberVO">
  
     	select 
     	b.rnum, b.no, b.email, b.name, b.nickname,b.tel, b.gender, b.age, b.comments, b.type, b.point, b.reg_date
     	from(
 		 select rownum as rnum, a.no, a.email, a.name, a.nickname, a.tel, a.gender, a.age, a.comments, a.type, a.point, a.reg_date
 		    from (
     			select no, email, name, nickname,age, tel, gender, comments, type, point, to_char(reg_date, 'yyyy/mm/dd') as reg_date
 		            from ruser_t
 		            
					<include refid="findSQL"></include>
				      
	<![CDATA[
 		            order by no desc) a
 		    where rownum <= #{startPage}+(#{numPerPage}-1) ) b
 		  where b.rnum >= #{startPage}

     ]]>
    </select>


  
  <!--관리자페이지: 검색기능 구현 (데이터 수 검색)  -->
  <select id="findCountDataM" resultType="int">
  

     	select count(no) from ruser_t

		<include refid="findSQL"></include>


  </select>
  
  
     
     
 <!--*********************************************************  -->    
 
 
 
<!--****************회원목록(관리자) 관련 메소드******************   -->
     <!--네이버 로그인 API insert 값  -->
     <insert id="naverInsert">
     	insert into naver_t (no, email, name)
     	values(naver_no_seq.nextval,#{email}, #{name} )
     </insert>
     
     
     <!-- 로그인 -->
     <select id = "loginCheck" parameterType = "MemberVO" resultType="MemberVO">
        select no, email, password, name, nickname, tel, age, comments, type, point
        from ruser_t
        where email = #{email} and password = #{password}
     </select>
     
<!--*********************************************************  -->
   <!--*********************************************************  -->    
 
     <!-- 체크박스 회원 탈퇴 = -->
     <delete id="checkDelete" parameterType="MemberVO">	
    	delete ruser_t
    	where no = #{no}
     </delete>
	<!-- 체크박스 회원 관리자 등업 -->     
	<update id="checkUpM" parameterType="MemberVO">
		update ruser_t
		set type='S'
		where no = #{no}
	</update>
	<!-- 체크박스 회원 일반회원 강등 -->
	<update id="checkDownM" parameterType="MemberVO">
			update ruser_t
			set type='U'
			where no = #{no}
	</update>  
     
     <!--*********************이메일 비밀번호 인증************************************ -->
	<update id="newPassword" parameterType="MemberVO">
		update ruser_t
		set password = #{password}
		where email=#{email} and hintq=#{hintq} and hinta=#{hinta}
	</update>

	<select id="comparePassword" parameterType="MemberVO" resultType="MemberVO">
	select *
	from ruser_t
	where email=#{email} and password = #{password}
	</select>
	
 <!--*********************구글정보있으면 가입, 정보없으면 로그인************************************ -->    
 	<select id="checkJoinGoogle" parameterType="MemberVO" resultType="Integer">
 	select count(*)
 	from ruser_t
 	where email=#{email} and name=#{name} and social_login='socialLogin'
 	</select>
 	
 	<insert id="joinGoogle" parameterType="MemberVO">
	 insert into ruser_t(no, email, name, nickname, social_login)
	values(ruser_no_seq.nextval, #{email}, #{name}, #{name}, #{socialLogin})
 	</insert>
     
     
     


     
  </mapper>